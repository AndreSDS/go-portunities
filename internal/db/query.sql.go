// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createOpenning = `-- name: CreateOpenning :one
INSERT INTO
    opennings (role, company, location, remote, link, salary)
VALUES
    (?, ?, ?, ?, ?, ?) RETURNING id, role, company, location, remote, link, salary
`

type CreateOpenningParams struct {
	Role     string
	Company  string
	Location string
	Remote   bool
	Link     string
	Salary   int64
}

func (q *Queries) CreateOpenning(ctx context.Context, arg CreateOpenningParams) (Openning, error) {
	row := q.db.QueryRowContext(ctx, createOpenning,
		arg.Role,
		arg.Company,
		arg.Location,
		arg.Remote,
		arg.Link,
		arg.Salary,
	)
	var i Openning
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Company,
		&i.Location,
		&i.Remote,
		&i.Link,
		&i.Salary,
	)
	return i, err
}

const deleteOpenning = `-- name: DeleteOpenning :exec
DELETE FROM opennings
WHERE
    id = ?
`

func (q *Queries) DeleteOpenning(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOpenning, id)
	return err
}

const getOpenning = `-- name: GetOpenning :one
SELECT
    id, role, company, location, remote, link, salary
FROM
    opennings
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetOpenning(ctx context.Context, id int64) (Openning, error) {
	row := q.db.QueryRowContext(ctx, getOpenning, id)
	var i Openning
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Company,
		&i.Location,
		&i.Remote,
		&i.Link,
		&i.Salary,
	)
	return i, err
}

const listOpennings = `-- name: ListOpennings :many
SELECT
    id, role, company, location, remote, link, salary
FROM
    opennings
ORDER BY
    company
`

func (q *Queries) ListOpennings(ctx context.Context) ([]Openning, error) {
	rows, err := q.db.QueryContext(ctx, listOpennings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Openning
	for rows.Next() {
		var i Openning
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Company,
			&i.Location,
			&i.Remote,
			&i.Link,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOpenning = `-- name: UpdateOpenning :exec
UPDATE opennings
SET
    role = ?,
    company = ?,
    location = ?,
    remote = ?,
    link = ?,
    salary = ?
WHERE
    id = ?
`

type UpdateOpenningParams struct {
	Role     string
	Company  string
	Location string
	Remote   bool
	Link     string
	Salary   int64
	ID       int64
}

func (q *Queries) UpdateOpenning(ctx context.Context, arg UpdateOpenningParams) error {
	_, err := q.db.ExecContext(ctx, updateOpenning,
		arg.Role,
		arg.Company,
		arg.Location,
		arg.Remote,
		arg.Link,
		arg.Salary,
		arg.ID,
	)
	return err
}
